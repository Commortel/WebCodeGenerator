
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Fri Feb 21 07:36:29 CET 2014
//----------------------------------------------------

package fr.ensisa.code_generator;

import java.util.TreeMap;
import java.util.Map;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Fri Feb 21 07:36:29 CET 2014
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\020\000\002\002\002\000\002\002\004\000\002\002" +
    "\003\000\002\003\002\000\002\003\004\000\002\004\007" +
    "\000\002\010\005\000\002\010\007\000\002\010\003\000" +
    "\002\010\004\000\002\006\002\000\002\006\004\000\002" +
    "\006\004\000\002\007\003\000\002\007\004\000\002\005" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\006\002\001\006\006\001\002\000\006\005" +
    "\ufff7\011\013\001\002\000\004\002\uffff\001\002\000\012" +
    "\005\ufff2\006\ufff2\011\ufff2\014\ufff2\001\002\000\004\002" +
    "\010\001\002\000\004\002\000\001\002\000\010\010\032" +
    "\011\013\012\033\001\002\000\004\005\015\001\002\000" +
    "\010\010\ufff4\011\ufff4\012\ufff4\001\002\000\004\002\ufffd" +
    "\001\002\000\004\013\016\001\002\000\010\005\ufff7\006" +
    "\006\011\013\001\002\000\012\005\ufff9\006\ufff9\011\ufff9" +
    "\014\ufff9\001\002\000\004\005\024\001\002\000\012\005" +
    "\ufff7\006\006\011\013\014\022\001\002\000\004\002\ufffc" +
    "\001\002\000\012\005\ufff8\006\006\011\013\014\ufff8\001" +
    "\002\000\006\007\026\017\025\001\002\000\004\005\027" +
    "\001\002\000\012\005\ufffb\006\ufffb\011\ufffb\014\ufffb\001" +
    "\002\000\004\020\030\001\002\000\012\005\ufffa\006\ufffa" +
    "\011\ufffa\014\ufffa\001\002\000\010\010\ufff3\011\013\012" +
    "\ufff3\001\002\000\004\005\ufff5\001\002\000\004\005\ufff6" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\031\000\010\002\006\003\004\005\003\001\001\000" +
    "\010\004\013\006\011\007\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\030\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\005\016\006" +
    "\017\007\010\010\020\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\005\016\006\017\007\010\010\022\001" +
    "\001\000\002\001\001\000\012\005\016\006\017\007\010" +
    "\010\022\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\030\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP_actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP_actions();
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP_do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append(info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    private Context context;

    public void setContext(Context context) {
    	this.context = context;
    }

    public Context getContext() {
		return context;
    }

	public Factory getFactory () {
		return getContext().getFactory();
	}



/** Cup generated class to encapsulate user supplied action code.*/
class CUP_actions {

  /** Constructor */

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP_do_action(
    int                        CUP_act_num,
    java_cup.runtime.lr_parser CUP_parser,
    java.util.Stack            CUP_stack,
    int                        CUP_top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP_result;

      /* select the action based on the action number */
      switch (CUP_act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // doc_comment ::= COMMENT 
            {
              Object RESULT =null;
		Object id = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getFactory().createComment(id); 
              CUP_result = getSymbolFactory().newSymbol("doc_comment",3, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // modifier ::= modifier modifier 
            {
              Object RESULT =null;
		Object m1 = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		Object m2 = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = (String)m1 + " " + m2; 
              CUP_result = getSymbolFactory().newSymbol("modifier",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // modifier ::= KEYWORD 
            {
              Object RESULT =null;
		Object k = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = k; 
              CUP_result = getSymbolFactory().newSymbol("modifier",5, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // modifiers ::= modifier CLASS 
            {
              Object RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = getFactory().createKeyword(m); 
              CUP_result = getSymbolFactory().newSymbol("modifiers",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // modifiers ::= modifier TYPE 
            {
              Object RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		Object t = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = getFactory().createKeyword(m + " " + t); 
              CUP_result = getSymbolFactory().newSymbol("modifiers",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // modifiers ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("modifiers",4, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // field_declaration ::= field_declaration field_declaration 
            {
              Object RESULT =null;
		Object fd1 = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		Object fd2 = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = fd1 + "\n" + fd2; 
              CUP_result = getSymbolFactory().newSymbol("field_declaration",6, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // field_declaration ::= doc_comment 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 RESULT = d; 
              CUP_result = getSymbolFactory().newSymbol("field_declaration",6, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // field_declaration ::= modifiers ID OPEN_PARENTHESIS ID CLOSE_PARENTHESIS 
            {
              Object RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		 RESULT = getFactory().createFunction(m,id); 
              CUP_result = getSymbolFactory().newSymbol("field_declaration",6, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // field_declaration ::= modifiers ID TERM 
            {
              Object RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-2)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = getFactory().createVariable(m,id); 
              CUP_result = getSymbolFactory().newSymbol("field_declaration",6, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // class_declaration ::= modifiers ID OPEN_BRACE field_declaration CLOSE_BRACE 
            {
              Object RESULT =null;
		Object m = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-4)).value;
		String id = (String)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-3)).value;
		Object fd = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		 RESULT = getFactory().createClass(m, id, fd); 
              CUP_result = getSymbolFactory().newSymbol("class_declaration",2, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type_declaration ::= doc_comment class_declaration 
            {
              Object RESULT =null;
		Object d = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		Object c = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;
		 getFactory().appendToFile(d,c); 
              CUP_result = getSymbolFactory().newSymbol("type_declaration",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type_declaration ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("type_declaration",1, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // compilation_unit ::= type_declaration 
            {
              Object RESULT =null;
		Object t = (Object)((java_cup.runtime.Symbol) CUP_stack.peek()).value;

              CUP_result = getSymbolFactory().newSymbol("compilation_unit",0, RESULT);
            }
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= compilation_unit EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP_stack.elementAt(CUP_top-1)).value;
		RESULT = start_val;
              CUP_result = getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP_parser.done_parsing();
          return CUP_result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // compilation_unit ::= 
            {
              Object RESULT =null;

              CUP_result = getSymbolFactory().newSymbol("compilation_unit",0, RESULT);
            }
          return CUP_result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

}
