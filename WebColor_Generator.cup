package fr.ensisa.code_generator;

import java.util.TreeMap;
import java.util.Map;

parser code {:
    
    public void report_error(String message, Object info) {
        StringBuffer m = new StringBuffer("Error");
		m.append(info.toString());
        m.append(" : "+message);
        System.err.println(m.toString());
    }
   
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }

    private Context context;

    public void setContext(Context context) {
    	this.context = context;
    }

    public Context getContext() {
		return context;
    }

	public Factory getFactory () {
		return getContext().getFactory();
	}

:}

terminal Integer	NUMBER;
terminal String		ID;
terminal			COMMENT;
terminal 			TERM;
terminal 			CLASS;
terminal 			KEYWORD; 
terminal			TYPE;
terminal			OPEN_BRACE, CLOSE_BRACE, OPEN_BRACKET, CLOSE_BRACKET, OPEN_PARENTHESIS, CLOSE_PARENTHESIS;
terminal			END_CLASS;
   
nonterminal 		compilation_unit, type_declaration;
nonterminal 		class_declaration, doc_comment;
nonterminal 		modifiers, modifier, field_declaration;

compilation_unit	::= 
					| type_declaration:t 
					;
					
type_declaration	::= 
					| doc_comment:d class_declaration:c {: getFactory().appendToFile(d,c); :}
					;

class_declaration	::= modifiers:m ID:id OPEN_BRACE field_declaration:fd CLOSE_BRACE {: RESULT = getFactory().createClass(m, id, fd); :}
					;
					
field_declarations	::= field_declaration:fd {: RESULT = fd; :}
					;
			     
field_declaration	::= modifiers:m ID:id TERM {: RESULT = getFactory().createVariable(m,id); :}
					| modifiers:m ID:id OPEN_PARENTHESIS ID CLOSE_PARENTHESIS {: RESULT = getFactory().createFunction(m,id); :}
					| doc_comment:d {: RESULT = d; :}
					| field_declaration:fd1 field_declaration:fd2 {: RESULT = fd1 + "\n" + fd2; :}
					;	
					
modifiers			::= 
					| modifier:m TYPE:t {: RESULT = getFactory().createKeyword(m + " " + t); :}
					| modifier:m CLASS {: RESULT = getFactory().createKeyword(m); :}
					;					
					
modifier 			::= KEYWORD:k {: RESULT = k; :}
					| modifier:m1 modifier:m2 {: RESULT = (String)m1 + " " + m2; :}
					;				
					
doc_comment			::= COMMENT:id {: RESULT = getFactory().createComment(id); :}
					;
